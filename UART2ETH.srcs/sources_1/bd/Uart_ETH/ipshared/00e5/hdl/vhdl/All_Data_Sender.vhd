-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity All_Data_Sender is
generic (
    C_M_AXI_DRAM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DRAM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DRAM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DRAM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DRAM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DRAM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DRAM_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DRAM_AWVALID : OUT STD_LOGIC;
    m_axi_DRAM_AWREADY : IN STD_LOGIC;
    m_axi_DRAM_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ADDR_WIDTH-1 downto 0);
    m_axi_DRAM_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ID_WIDTH-1 downto 0);
    m_axi_DRAM_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DRAM_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_AWUSER_WIDTH-1 downto 0);
    m_axi_DRAM_WVALID : OUT STD_LOGIC;
    m_axi_DRAM_WREADY : IN STD_LOGIC;
    m_axi_DRAM_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_DATA_WIDTH-1 downto 0);
    m_axi_DRAM_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_DATA_WIDTH/8-1 downto 0);
    m_axi_DRAM_WLAST : OUT STD_LOGIC;
    m_axi_DRAM_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ID_WIDTH-1 downto 0);
    m_axi_DRAM_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_WUSER_WIDTH-1 downto 0);
    m_axi_DRAM_ARVALID : OUT STD_LOGIC;
    m_axi_DRAM_ARREADY : IN STD_LOGIC;
    m_axi_DRAM_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ADDR_WIDTH-1 downto 0);
    m_axi_DRAM_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ID_WIDTH-1 downto 0);
    m_axi_DRAM_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DRAM_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ARUSER_WIDTH-1 downto 0);
    m_axi_DRAM_RVALID : IN STD_LOGIC;
    m_axi_DRAM_RREADY : OUT STD_LOGIC;
    m_axi_DRAM_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DRAM_DATA_WIDTH-1 downto 0);
    m_axi_DRAM_RLAST : IN STD_LOGIC;
    m_axi_DRAM_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DRAM_ID_WIDTH-1 downto 0);
    m_axi_DRAM_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DRAM_RUSER_WIDTH-1 downto 0);
    m_axi_DRAM_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_BVALID : IN STD_LOGIC;
    m_axi_DRAM_BREADY : OUT STD_LOGIC;
    m_axi_DRAM_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DRAM_ID_WIDTH-1 downto 0);
    m_axi_DRAM_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DRAM_BUSER_WIDTH-1 downto 0);
    uart1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart1_V_full_n : IN STD_LOGIC;
    uart1_V_write : OUT STD_LOGIC;
    uart2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart2_V_full_n : IN STD_LOGIC;
    uart2_V_write : OUT STD_LOGIC;
    uart3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart3_V_full_n : IN STD_LOGIC;
    uart3_V_write : OUT STD_LOGIC;
    uart4_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart4_V_full_n : IN STD_LOGIC;
    uart4_V_write : OUT STD_LOGIC;
    uart5_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart5_V_full_n : IN STD_LOGIC;
    uart5_V_write : OUT STD_LOGIC;
    uart6_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart6_V_full_n : IN STD_LOGIC;
    uart6_V_write : OUT STD_LOGIC;
    uart7_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart7_V_full_n : IN STD_LOGIC;
    uart7_V_write : OUT STD_LOGIC;
    uart8_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart8_V_full_n : IN STD_LOGIC;
    uart8_V_write : OUT STD_LOGIC;
    uart9_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart9_V_full_n : IN STD_LOGIC;
    uart9_V_write : OUT STD_LOGIC;
    uart10_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart10_V_full_n : IN STD_LOGIC;
    uart10_V_write : OUT STD_LOGIC;
    uart11_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart11_V_full_n : IN STD_LOGIC;
    uart11_V_write : OUT STD_LOGIC;
    uart12_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart12_V_full_n : IN STD_LOGIC;
    uart12_V_write : OUT STD_LOGIC;
    uart13_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart13_V_full_n : IN STD_LOGIC;
    uart13_V_write : OUT STD_LOGIC;
    uart14_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart14_V_full_n : IN STD_LOGIC;
    uart14_V_write : OUT STD_LOGIC;
    uart15_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart15_V_full_n : IN STD_LOGIC;
    uart15_V_write : OUT STD_LOGIC;
    uart16_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart16_V_full_n : IN STD_LOGIC;
    uart16_V_write : OUT STD_LOGIC;
    uart17_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart17_V_full_n : IN STD_LOGIC;
    uart17_V_write : OUT STD_LOGIC;
    uart18_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart18_V_full_n : IN STD_LOGIC;
    uart18_V_write : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of All_Data_Sender is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "All_Data_Sender,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=125,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=896,HLS_SYN_LUT=1587}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_800 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_const_lv17_1000 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_const_lv17_1800 : STD_LOGIC_VECTOR (16 downto 0) := "00001100000000000";
    constant ap_const_lv17_2000 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_const_lv17_2800 : STD_LOGIC_VECTOR (16 downto 0) := "00010100000000000";
    constant ap_const_lv17_3000 : STD_LOGIC_VECTOR (16 downto 0) := "00011000000000000";
    constant ap_const_lv17_3800 : STD_LOGIC_VECTOR (16 downto 0) := "00011100000000000";
    constant ap_const_lv17_4000 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_const_lv17_4800 : STD_LOGIC_VECTOR (16 downto 0) := "00100100000000000";
    constant ap_const_lv17_5000 : STD_LOGIC_VECTOR (16 downto 0) := "00101000000000000";
    constant ap_const_lv17_5800 : STD_LOGIC_VECTOR (16 downto 0) := "00101100000000000";
    constant ap_const_lv17_6000 : STD_LOGIC_VECTOR (16 downto 0) := "00110000000000000";
    constant ap_const_lv17_6800 : STD_LOGIC_VECTOR (16 downto 0) := "00110100000000000";
    constant ap_const_lv17_7000 : STD_LOGIC_VECTOR (16 downto 0) := "00111000000000000";
    constant ap_const_lv17_7800 : STD_LOGIC_VECTOR (16 downto 0) := "00111100000000000";
    constant ap_const_lv17_8000 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_const_lv17_8800 : STD_LOGIC_VECTOR (16 downto 0) := "01000100000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DRAM_AWREADY : STD_LOGIC;
    signal DRAM_WREADY : STD_LOGIC;
    signal DRAM_ARVALID : STD_LOGIC;
    signal DRAM_ARREADY : STD_LOGIC;
    signal DRAM_RVALID : STD_LOGIC;
    signal DRAM_RREADY : STD_LOGIC;
    signal DRAM_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DRAM_RLAST : STD_LOGIC;
    signal DRAM_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DRAM_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DRAM_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DRAM_BVALID : STD_LOGIC;
    signal DRAM_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DRAM_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DRAM_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DMA_Send_fu_366_ap_start : STD_LOGIC;
    signal grp_DMA_Send_fu_366_ap_done : STD_LOGIC;
    signal grp_DMA_Send_fu_366_ap_idle : STD_LOGIC;
    signal grp_DMA_Send_fu_366_ap_ready : STD_LOGIC;
    signal grp_DMA_Send_fu_366_a_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_DMA_Send_fu_366_a_ce0 : STD_LOGIC;
    signal grp_DMA_Send_fu_366_a_we0 : STD_LOGIC;
    signal grp_DMA_Send_fu_366_a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DMA_Send_fu_366_uart_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_DMA_Send_fu_366_uart_V_full_n : STD_LOGIC;
    signal grp_DMA_Send_fu_366_uart_V_write : STD_LOGIC;
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWVALID : STD_LOGIC;
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_WVALID : STD_LOGIC;
    signal grp_DMA_Send_fu_366_m_axi_DRAM_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_WLAST : STD_LOGIC;
    signal grp_DMA_Send_fu_366_m_axi_DRAM_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARVALID : STD_LOGIC;
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DMA_Send_fu_366_m_axi_DRAM_RREADY : STD_LOGIC;
    signal grp_DMA_Send_fu_366_m_axi_DRAM_BREADY : STD_LOGIC;
    signal grp_DMA_Send_fu_366_BaseAddress : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_DMA_Send_fu_366_index_V : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_grp_DMA_Send_fu_366_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component DMA_Send IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        uart_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        uart_V_full_n : IN STD_LOGIC;
        uart_V_write : OUT STD_LOGIC;
        m_axi_DRAM_AWVALID : OUT STD_LOGIC;
        m_axi_DRAM_AWREADY : IN STD_LOGIC;
        m_axi_DRAM_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_DRAM_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_DRAM_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_DRAM_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_DRAM_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_DRAM_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_DRAM_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_DRAM_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_DRAM_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_DRAM_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_DRAM_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_DRAM_WVALID : OUT STD_LOGIC;
        m_axi_DRAM_WREADY : IN STD_LOGIC;
        m_axi_DRAM_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_DRAM_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_DRAM_WLAST : OUT STD_LOGIC;
        m_axi_DRAM_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_DRAM_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_DRAM_ARVALID : OUT STD_LOGIC;
        m_axi_DRAM_ARREADY : IN STD_LOGIC;
        m_axi_DRAM_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_DRAM_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_DRAM_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_DRAM_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_DRAM_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_DRAM_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_DRAM_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_DRAM_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_DRAM_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_DRAM_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_DRAM_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_DRAM_RVALID : IN STD_LOGIC;
        m_axi_DRAM_RREADY : OUT STD_LOGIC;
        m_axi_DRAM_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_DRAM_RLAST : IN STD_LOGIC;
        m_axi_DRAM_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_DRAM_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_DRAM_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_DRAM_BVALID : IN STD_LOGIC;
        m_axi_DRAM_BREADY : OUT STD_LOGIC;
        m_axi_DRAM_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_DRAM_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_DRAM_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        BaseAddress : IN STD_LOGIC_VECTOR (16 downto 0);
        index_V : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component All_Data_Sender_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        a_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        a_ce0 : IN STD_LOGIC;
        a_we0 : IN STD_LOGIC;
        a_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component All_Data_Sender_DRAM_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    All_Data_Sender_AXILiteS_s_axi_U : component All_Data_Sender_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        a_address0 => grp_DMA_Send_fu_366_a_address0,
        a_ce0 => a_ce0,
        a_we0 => a_we0,
        a_d0 => grp_DMA_Send_fu_366_a_d0,
        a_q0 => a_q0);

    All_Data_Sender_DRAM_m_axi_U : component All_Data_Sender_DRAM_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DRAM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DRAM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DRAM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DRAM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DRAM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DRAM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DRAM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DRAM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DRAM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DRAM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DRAM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DRAM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DRAM_AWVALID,
        AWREADY => m_axi_DRAM_AWREADY,
        AWADDR => m_axi_DRAM_AWADDR,
        AWID => m_axi_DRAM_AWID,
        AWLEN => m_axi_DRAM_AWLEN,
        AWSIZE => m_axi_DRAM_AWSIZE,
        AWBURST => m_axi_DRAM_AWBURST,
        AWLOCK => m_axi_DRAM_AWLOCK,
        AWCACHE => m_axi_DRAM_AWCACHE,
        AWPROT => m_axi_DRAM_AWPROT,
        AWQOS => m_axi_DRAM_AWQOS,
        AWREGION => m_axi_DRAM_AWREGION,
        AWUSER => m_axi_DRAM_AWUSER,
        WVALID => m_axi_DRAM_WVALID,
        WREADY => m_axi_DRAM_WREADY,
        WDATA => m_axi_DRAM_WDATA,
        WSTRB => m_axi_DRAM_WSTRB,
        WLAST => m_axi_DRAM_WLAST,
        WID => m_axi_DRAM_WID,
        WUSER => m_axi_DRAM_WUSER,
        ARVALID => m_axi_DRAM_ARVALID,
        ARREADY => m_axi_DRAM_ARREADY,
        ARADDR => m_axi_DRAM_ARADDR,
        ARID => m_axi_DRAM_ARID,
        ARLEN => m_axi_DRAM_ARLEN,
        ARSIZE => m_axi_DRAM_ARSIZE,
        ARBURST => m_axi_DRAM_ARBURST,
        ARLOCK => m_axi_DRAM_ARLOCK,
        ARCACHE => m_axi_DRAM_ARCACHE,
        ARPROT => m_axi_DRAM_ARPROT,
        ARQOS => m_axi_DRAM_ARQOS,
        ARREGION => m_axi_DRAM_ARREGION,
        ARUSER => m_axi_DRAM_ARUSER,
        RVALID => m_axi_DRAM_RVALID,
        RREADY => m_axi_DRAM_RREADY,
        RDATA => m_axi_DRAM_RDATA,
        RLAST => m_axi_DRAM_RLAST,
        RID => m_axi_DRAM_RID,
        RUSER => m_axi_DRAM_RUSER,
        RRESP => m_axi_DRAM_RRESP,
        BVALID => m_axi_DRAM_BVALID,
        BREADY => m_axi_DRAM_BREADY,
        BRESP => m_axi_DRAM_BRESP,
        BID => m_axi_DRAM_BID,
        BUSER => m_axi_DRAM_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DRAM_ARVALID,
        I_ARREADY => DRAM_ARREADY,
        I_ARADDR => grp_DMA_Send_fu_366_m_axi_DRAM_ARADDR,
        I_ARID => grp_DMA_Send_fu_366_m_axi_DRAM_ARID,
        I_ARLEN => grp_DMA_Send_fu_366_m_axi_DRAM_ARLEN,
        I_ARSIZE => grp_DMA_Send_fu_366_m_axi_DRAM_ARSIZE,
        I_ARLOCK => grp_DMA_Send_fu_366_m_axi_DRAM_ARLOCK,
        I_ARCACHE => grp_DMA_Send_fu_366_m_axi_DRAM_ARCACHE,
        I_ARQOS => grp_DMA_Send_fu_366_m_axi_DRAM_ARQOS,
        I_ARPROT => grp_DMA_Send_fu_366_m_axi_DRAM_ARPROT,
        I_ARUSER => grp_DMA_Send_fu_366_m_axi_DRAM_ARUSER,
        I_ARBURST => grp_DMA_Send_fu_366_m_axi_DRAM_ARBURST,
        I_ARREGION => grp_DMA_Send_fu_366_m_axi_DRAM_ARREGION,
        I_RVALID => DRAM_RVALID,
        I_RREADY => DRAM_RREADY,
        I_RDATA => DRAM_RDATA,
        I_RID => DRAM_RID,
        I_RUSER => DRAM_RUSER,
        I_RRESP => DRAM_RRESP,
        I_RLAST => DRAM_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DRAM_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DRAM_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DRAM_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DRAM_BRESP,
        I_BID => DRAM_BID,
        I_BUSER => DRAM_BUSER);

    grp_DMA_Send_fu_366 : component DMA_Send
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_DMA_Send_fu_366_ap_start,
        ap_done => grp_DMA_Send_fu_366_ap_done,
        ap_idle => grp_DMA_Send_fu_366_ap_idle,
        ap_ready => grp_DMA_Send_fu_366_ap_ready,
        a_address0 => grp_DMA_Send_fu_366_a_address0,
        a_ce0 => grp_DMA_Send_fu_366_a_ce0,
        a_we0 => grp_DMA_Send_fu_366_a_we0,
        a_d0 => grp_DMA_Send_fu_366_a_d0,
        a_q0 => a_q0,
        uart_V_din => grp_DMA_Send_fu_366_uart_V_din,
        uart_V_full_n => grp_DMA_Send_fu_366_uart_V_full_n,
        uart_V_write => grp_DMA_Send_fu_366_uart_V_write,
        m_axi_DRAM_AWVALID => grp_DMA_Send_fu_366_m_axi_DRAM_AWVALID,
        m_axi_DRAM_AWREADY => ap_const_logic_0,
        m_axi_DRAM_AWADDR => grp_DMA_Send_fu_366_m_axi_DRAM_AWADDR,
        m_axi_DRAM_AWID => grp_DMA_Send_fu_366_m_axi_DRAM_AWID,
        m_axi_DRAM_AWLEN => grp_DMA_Send_fu_366_m_axi_DRAM_AWLEN,
        m_axi_DRAM_AWSIZE => grp_DMA_Send_fu_366_m_axi_DRAM_AWSIZE,
        m_axi_DRAM_AWBURST => grp_DMA_Send_fu_366_m_axi_DRAM_AWBURST,
        m_axi_DRAM_AWLOCK => grp_DMA_Send_fu_366_m_axi_DRAM_AWLOCK,
        m_axi_DRAM_AWCACHE => grp_DMA_Send_fu_366_m_axi_DRAM_AWCACHE,
        m_axi_DRAM_AWPROT => grp_DMA_Send_fu_366_m_axi_DRAM_AWPROT,
        m_axi_DRAM_AWQOS => grp_DMA_Send_fu_366_m_axi_DRAM_AWQOS,
        m_axi_DRAM_AWREGION => grp_DMA_Send_fu_366_m_axi_DRAM_AWREGION,
        m_axi_DRAM_AWUSER => grp_DMA_Send_fu_366_m_axi_DRAM_AWUSER,
        m_axi_DRAM_WVALID => grp_DMA_Send_fu_366_m_axi_DRAM_WVALID,
        m_axi_DRAM_WREADY => ap_const_logic_0,
        m_axi_DRAM_WDATA => grp_DMA_Send_fu_366_m_axi_DRAM_WDATA,
        m_axi_DRAM_WSTRB => grp_DMA_Send_fu_366_m_axi_DRAM_WSTRB,
        m_axi_DRAM_WLAST => grp_DMA_Send_fu_366_m_axi_DRAM_WLAST,
        m_axi_DRAM_WID => grp_DMA_Send_fu_366_m_axi_DRAM_WID,
        m_axi_DRAM_WUSER => grp_DMA_Send_fu_366_m_axi_DRAM_WUSER,
        m_axi_DRAM_ARVALID => grp_DMA_Send_fu_366_m_axi_DRAM_ARVALID,
        m_axi_DRAM_ARREADY => DRAM_ARREADY,
        m_axi_DRAM_ARADDR => grp_DMA_Send_fu_366_m_axi_DRAM_ARADDR,
        m_axi_DRAM_ARID => grp_DMA_Send_fu_366_m_axi_DRAM_ARID,
        m_axi_DRAM_ARLEN => grp_DMA_Send_fu_366_m_axi_DRAM_ARLEN,
        m_axi_DRAM_ARSIZE => grp_DMA_Send_fu_366_m_axi_DRAM_ARSIZE,
        m_axi_DRAM_ARBURST => grp_DMA_Send_fu_366_m_axi_DRAM_ARBURST,
        m_axi_DRAM_ARLOCK => grp_DMA_Send_fu_366_m_axi_DRAM_ARLOCK,
        m_axi_DRAM_ARCACHE => grp_DMA_Send_fu_366_m_axi_DRAM_ARCACHE,
        m_axi_DRAM_ARPROT => grp_DMA_Send_fu_366_m_axi_DRAM_ARPROT,
        m_axi_DRAM_ARQOS => grp_DMA_Send_fu_366_m_axi_DRAM_ARQOS,
        m_axi_DRAM_ARREGION => grp_DMA_Send_fu_366_m_axi_DRAM_ARREGION,
        m_axi_DRAM_ARUSER => grp_DMA_Send_fu_366_m_axi_DRAM_ARUSER,
        m_axi_DRAM_RVALID => DRAM_RVALID,
        m_axi_DRAM_RREADY => grp_DMA_Send_fu_366_m_axi_DRAM_RREADY,
        m_axi_DRAM_RDATA => DRAM_RDATA,
        m_axi_DRAM_RLAST => DRAM_RLAST,
        m_axi_DRAM_RID => DRAM_RID,
        m_axi_DRAM_RUSER => DRAM_RUSER,
        m_axi_DRAM_RRESP => DRAM_RRESP,
        m_axi_DRAM_BVALID => ap_const_logic_0,
        m_axi_DRAM_BREADY => grp_DMA_Send_fu_366_m_axi_DRAM_BREADY,
        m_axi_DRAM_BRESP => ap_const_lv2_0,
        m_axi_DRAM_BID => ap_const_lv1_0,
        m_axi_DRAM_BUSER => ap_const_lv1_0,
        BaseAddress => grp_DMA_Send_fu_366_BaseAddress,
        index_V => grp_DMA_Send_fu_366_index_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_DMA_Send_fu_366_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_DMA_Send_fu_366_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_reg_grp_DMA_Send_fu_366_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_DMA_Send_fu_366_ap_ready)) then 
                    ap_reg_grp_DMA_Send_fu_366_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (grp_DMA_Send_fu_366_ap_done, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_DMA_Send_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    DRAM_ARVALID_assign_proc : process(grp_DMA_Send_fu_366_m_axi_DRAM_ARVALID, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            DRAM_ARVALID <= grp_DMA_Send_fu_366_m_axi_DRAM_ARVALID;
        else 
            DRAM_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DRAM_RREADY_assign_proc : process(grp_DMA_Send_fu_366_m_axi_DRAM_RREADY, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            DRAM_RREADY <= grp_DMA_Send_fu_366_m_axi_DRAM_RREADY;
        else 
            DRAM_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    a_ce0_assign_proc : process(grp_DMA_Send_fu_366_a_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            a_ce0 <= grp_DMA_Send_fu_366_a_ce0;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(grp_DMA_Send_fu_366_a_we0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            a_we0 <= grp_DMA_Send_fu_366_a_we0;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_DMA_Send_fu_366_BaseAddress_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_8800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_8000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_7800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_7000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_6800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_6000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_5800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_5000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_4800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_4000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_3800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_3000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_2800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_2000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_1800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_1000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_DMA_Send_fu_366_BaseAddress <= ap_const_lv17_0;
        else 
            grp_DMA_Send_fu_366_BaseAddress <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_DMA_Send_fu_366_ap_start <= ap_reg_grp_DMA_Send_fu_366_ap_start;

    grp_DMA_Send_fu_366_index_V_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_DMA_Send_fu_366_index_V <= ap_const_lv6_0;
        else 
            grp_DMA_Send_fu_366_index_V <= "XXXXXX";
        end if; 
    end process;


    grp_DMA_Send_fu_366_uart_V_full_n_assign_proc : process(uart1_V_full_n, uart2_V_full_n, uart3_V_full_n, uart4_V_full_n, uart5_V_full_n, uart6_V_full_n, uart7_V_full_n, uart8_V_full_n, uart9_V_full_n, uart10_V_full_n, uart11_V_full_n, uart12_V_full_n, uart13_V_full_n, uart14_V_full_n, uart15_V_full_n, uart16_V_full_n, uart17_V_full_n, uart18_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart18_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart17_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart16_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart15_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart14_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart13_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart12_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart11_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart10_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart9_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart8_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart7_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart6_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart5_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart4_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart3_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart2_V_full_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart1_V_full_n;
        else 
            grp_DMA_Send_fu_366_uart_V_full_n <= uart18_V_full_n;
        end if; 
    end process;

    uart10_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart10_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            uart10_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart10_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart11_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart11_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            uart11_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart11_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart12_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart12_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            uart12_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart12_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart13_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart13_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            uart13_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart13_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart14_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart14_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            uart14_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart14_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart15_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart15_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            uart15_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart15_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart16_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart16_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            uart16_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart16_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart17_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart17_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            uart17_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart17_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart18_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart18_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            uart18_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart18_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart1_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart1_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            uart1_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart2_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart2_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            uart2_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart3_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart3_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            uart3_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart4_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart4_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            uart4_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart4_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart5_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart5_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            uart5_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart5_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart6_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart6_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            uart6_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart6_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart7_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart7_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            uart7_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart7_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart8_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart8_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            uart8_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart8_V_write <= ap_const_logic_0;
        end if; 
    end process;

    uart9_V_din <= grp_DMA_Send_fu_366_uart_V_din;

    uart9_V_write_assign_proc : process(grp_DMA_Send_fu_366_uart_V_write, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            uart9_V_write <= grp_DMA_Send_fu_366_uart_V_write;
        else 
            uart9_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
