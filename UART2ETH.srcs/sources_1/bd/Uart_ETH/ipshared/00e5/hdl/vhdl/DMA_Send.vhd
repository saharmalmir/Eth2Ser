-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DMA_Send is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    uart_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    uart_V_full_n : IN STD_LOGIC;
    uart_V_write : OUT STD_LOGIC;
    m_axi_DRAM_AWVALID : OUT STD_LOGIC;
    m_axi_DRAM_AWREADY : IN STD_LOGIC;
    m_axi_DRAM_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_DRAM_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DRAM_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_DRAM_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DRAM_WVALID : OUT STD_LOGIC;
    m_axi_DRAM_WREADY : IN STD_LOGIC;
    m_axi_DRAM_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_DRAM_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_WLAST : OUT STD_LOGIC;
    m_axi_DRAM_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DRAM_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DRAM_ARVALID : OUT STD_LOGIC;
    m_axi_DRAM_ARREADY : IN STD_LOGIC;
    m_axi_DRAM_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_DRAM_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DRAM_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_DRAM_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DRAM_RVALID : IN STD_LOGIC;
    m_axi_DRAM_RREADY : OUT STD_LOGIC;
    m_axi_DRAM_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_DRAM_RLAST : IN STD_LOGIC;
    m_axi_DRAM_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DRAM_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DRAM_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_BVALID : IN STD_LOGIC;
    m_axi_DRAM_BREADY : OUT STD_LOGIC;
    m_axi_DRAM_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DRAM_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    BaseAddress : IN STD_LOGIC_VECTOR (16 downto 0);
    index_V : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of DMA_Send is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal uart_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_1_reg_195 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_199 : STD_LOGIC_VECTOR (0 downto 0);
    signal DRAM_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal DRAM_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal a_addr_reg_179 : STD_LOGIC_VECTOR (5 downto 0);
    signal BaseAddress_cast_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal BaseAddress_cast_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal a_load_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_nbwritereq_fu_72_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sig_ioackin_m_axi_DRAM_ARREADY : STD_LOGIC;
    signal tmp_3_fu_170_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_219 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_cast_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_DRAM_ARREADY : STD_LOGIC := '0';
    signal ap_predicate_op47_write_state12 : BOOLEAN;
    signal ap_block_state12 : BOOLEAN;
    signal tmp_cast_fu_128_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum2_fu_137_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_DRAM_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_DRAM_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_sig_ioackin_m_axi_DRAM_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_DRAM_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_DRAM_ARREADY)) then 
                        ap_reg_ioackin_m_axi_DRAM_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    BaseAddress_cast_reg_184(16 downto 0) <= BaseAddress_cast_fu_124_p1(16 downto 0);
                a_load_reg_189 <= a_q0;
                tmp_1_reg_195 <= tmp_1_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                a_addr_reg_179 <= tmp_fu_119_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_1_fu_131_p2))) then
                tmp_2_reg_199 <= (0=>uart_V_full_n, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_DRAM_RVALID = ap_const_logic_1))) then
                tmp_3_reg_219 <= tmp_3_fu_170_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_5_reg_208 <= tmp_5_fu_153_p2;
            end if;
        end if;
    end process;
    BaseAddress_cast_reg_184(31 downto 17) <= "000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, uart_V_full_n, m_axi_DRAM_RVALID, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state2, tmp_1_fu_131_p2, tmp_2_nbwritereq_fu_72_p3, ap_sig_ioackin_m_axi_DRAM_ARREADY, ap_predicate_op47_write_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_1_fu_131_p2) and (ap_const_lv1_1 = tmp_2_nbwritereq_fu_72_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_m_axi_DRAM_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_DRAM_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and not(((ap_const_logic_0 = uart_V_full_n) and (ap_const_boolean_1 = ap_predicate_op47_write_state12))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    BaseAddress_cast_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(BaseAddress),32));

    DRAM_blk_n_AR_assign_proc : process(m_axi_DRAM_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            DRAM_blk_n_AR <= m_axi_DRAM_ARREADY;
        else 
            DRAM_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DRAM_blk_n_R_assign_proc : process(m_axi_DRAM_RVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            DRAM_blk_n_R <= m_axi_DRAM_RVALID;
        else 
            DRAM_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    a_address0_assign_proc : process(ap_CS_fsm_state1, a_addr_reg_179, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_fu_119_p1, sum2_cast_fu_143_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= a_addr_reg_179;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= sum2_cast_fu_143_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            a_address0 <= tmp_fu_119_p1(6 - 1 downto 0);
        else 
            a_address0 <= "XXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_d0 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(a_load_reg_189));

    a_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state12_assign_proc : process(uart_V_full_n, ap_predicate_op47_write_state12)
    begin
                ap_block_state12 <= ((ap_const_logic_0 = uart_V_full_n) and (ap_const_boolean_1 = ap_predicate_op47_write_state12));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, uart_V_full_n, ap_CS_fsm_state12, ap_predicate_op47_write_state12)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and not(((ap_const_logic_0 = uart_V_full_n) and (ap_const_boolean_1 = ap_predicate_op47_write_state12)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op47_write_state12_assign_proc : process(tmp_1_reg_195, tmp_2_reg_199)
    begin
                ap_predicate_op47_write_state12 <= ((tmp_1_reg_195 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_2_reg_199));
    end process;


    ap_ready_assign_proc : process(uart_V_full_n, ap_CS_fsm_state12, ap_predicate_op47_write_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and not(((ap_const_logic_0 = uart_V_full_n) and (ap_const_boolean_1 = ap_predicate_op47_write_state12))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_DRAM_ARREADY_assign_proc : process(m_axi_DRAM_ARREADY, ap_reg_ioackin_m_axi_DRAM_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_DRAM_ARREADY)) then 
            ap_sig_ioackin_m_axi_DRAM_ARREADY <= m_axi_DRAM_ARREADY;
        else 
            ap_sig_ioackin_m_axi_DRAM_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_DRAM_ARADDR <= tmp_5_reg_208;
    m_axi_DRAM_ARBURST <= ap_const_lv2_0;
    m_axi_DRAM_ARCACHE <= ap_const_lv4_0;
    m_axi_DRAM_ARID <= ap_const_lv1_0;
    m_axi_DRAM_ARLEN <= ap_const_lv32_1;
    m_axi_DRAM_ARLOCK <= ap_const_lv2_0;
    m_axi_DRAM_ARPROT <= ap_const_lv3_0;
    m_axi_DRAM_ARQOS <= ap_const_lv4_0;
    m_axi_DRAM_ARREGION <= ap_const_lv4_0;
    m_axi_DRAM_ARSIZE <= ap_const_lv3_0;
    m_axi_DRAM_ARUSER <= ap_const_lv1_0;

    m_axi_DRAM_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_m_axi_DRAM_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_DRAM_ARREADY))) then 
            m_axi_DRAM_ARVALID <= ap_const_logic_1;
        else 
            m_axi_DRAM_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_DRAM_AWADDR <= ap_const_lv32_0;
    m_axi_DRAM_AWBURST <= ap_const_lv2_0;
    m_axi_DRAM_AWCACHE <= ap_const_lv4_0;
    m_axi_DRAM_AWID <= ap_const_lv1_0;
    m_axi_DRAM_AWLEN <= ap_const_lv32_0;
    m_axi_DRAM_AWLOCK <= ap_const_lv2_0;
    m_axi_DRAM_AWPROT <= ap_const_lv3_0;
    m_axi_DRAM_AWQOS <= ap_const_lv4_0;
    m_axi_DRAM_AWREGION <= ap_const_lv4_0;
    m_axi_DRAM_AWSIZE <= ap_const_lv3_0;
    m_axi_DRAM_AWUSER <= ap_const_lv1_0;
    m_axi_DRAM_AWVALID <= ap_const_logic_0;
    m_axi_DRAM_BREADY <= ap_const_logic_0;

    m_axi_DRAM_RREADY_assign_proc : process(m_axi_DRAM_RVALID, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_DRAM_RVALID = ap_const_logic_1))) then 
            m_axi_DRAM_RREADY <= ap_const_logic_1;
        else 
            m_axi_DRAM_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_DRAM_WDATA <= ap_const_lv32_0;
    m_axi_DRAM_WID <= ap_const_lv1_0;
    m_axi_DRAM_WLAST <= ap_const_logic_0;
    m_axi_DRAM_WSTRB <= ap_const_lv4_0;
    m_axi_DRAM_WUSER <= ap_const_lv1_0;
    m_axi_DRAM_WVALID <= ap_const_logic_0;
    sum2_cast_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_137_p2),32));
    sum2_fu_137_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp_cast_fu_128_p1));
    tmp_1_fu_131_p2 <= "1" when (signed(a_q0) > signed(ap_const_lv32_0)) else "0";
    tmp_2_nbwritereq_fu_72_p3 <= (0=>uart_V_full_n, others=>'-');
    tmp_3_fu_170_p1 <= m_axi_DRAM_RDATA(8 - 1 downto 0);
    tmp_4_fu_148_p2 <= std_logic_vector(unsigned(a_q0) + unsigned(BaseAddress_cast_reg_184));
    tmp_5_fu_153_p2 <= std_logic_vector(unsigned(tmp_4_fu_148_p2) - unsigned(a_load_reg_189));
    tmp_cast_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V),7));
    tmp_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V),32));

    uart_V_blk_n_assign_proc : process(uart_V_full_n, ap_CS_fsm_state12, tmp_1_reg_195, tmp_2_reg_199)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_1_reg_195 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_2_reg_199))) then 
            uart_V_blk_n <= uart_V_full_n;
        else 
            uart_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    uart_V_din <= tmp_3_reg_219;

    uart_V_write_assign_proc : process(uart_V_full_n, ap_CS_fsm_state12, ap_predicate_op47_write_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_1 = ap_predicate_op47_write_state12) and not(((ap_const_logic_0 = uart_V_full_n) and (ap_const_boolean_1 = ap_predicate_op47_write_state12))))) then 
            uart_V_write <= ap_const_logic_1;
        else 
            uart_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
