-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AllDataMover is
generic (
    C_M_AXI_DRAM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DRAM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DRAM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DRAM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DRAM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DRAM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DRAM_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DRAM_AWVALID : OUT STD_LOGIC;
    m_axi_DRAM_AWREADY : IN STD_LOGIC;
    m_axi_DRAM_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ADDR_WIDTH-1 downto 0);
    m_axi_DRAM_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ID_WIDTH-1 downto 0);
    m_axi_DRAM_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DRAM_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_AWUSER_WIDTH-1 downto 0);
    m_axi_DRAM_WVALID : OUT STD_LOGIC;
    m_axi_DRAM_WREADY : IN STD_LOGIC;
    m_axi_DRAM_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_DATA_WIDTH-1 downto 0);
    m_axi_DRAM_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_DATA_WIDTH/8-1 downto 0);
    m_axi_DRAM_WLAST : OUT STD_LOGIC;
    m_axi_DRAM_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ID_WIDTH-1 downto 0);
    m_axi_DRAM_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_WUSER_WIDTH-1 downto 0);
    m_axi_DRAM_ARVALID : OUT STD_LOGIC;
    m_axi_DRAM_ARREADY : IN STD_LOGIC;
    m_axi_DRAM_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ADDR_WIDTH-1 downto 0);
    m_axi_DRAM_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ID_WIDTH-1 downto 0);
    m_axi_DRAM_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DRAM_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DRAM_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DRAM_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DRAM_ARUSER_WIDTH-1 downto 0);
    m_axi_DRAM_RVALID : IN STD_LOGIC;
    m_axi_DRAM_RREADY : OUT STD_LOGIC;
    m_axi_DRAM_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DRAM_DATA_WIDTH-1 downto 0);
    m_axi_DRAM_RLAST : IN STD_LOGIC;
    m_axi_DRAM_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DRAM_ID_WIDTH-1 downto 0);
    m_axi_DRAM_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DRAM_RUSER_WIDTH-1 downto 0);
    m_axi_DRAM_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_BVALID : IN STD_LOGIC;
    m_axi_DRAM_BREADY : OUT STD_LOGIC;
    m_axi_DRAM_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DRAM_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DRAM_ID_WIDTH-1 downto 0);
    m_axi_DRAM_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DRAM_BUSER_WIDTH-1 downto 0);
    uart1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart1_V_empty_n : IN STD_LOGIC;
    uart1_V_read : OUT STD_LOGIC;
    uart2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart2_V_empty_n : IN STD_LOGIC;
    uart2_V_read : OUT STD_LOGIC;
    uart3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart3_V_empty_n : IN STD_LOGIC;
    uart3_V_read : OUT STD_LOGIC;
    uart4_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart4_V_empty_n : IN STD_LOGIC;
    uart4_V_read : OUT STD_LOGIC;
    uart5_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart5_V_empty_n : IN STD_LOGIC;
    uart5_V_read : OUT STD_LOGIC;
    uart6_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart6_V_empty_n : IN STD_LOGIC;
    uart6_V_read : OUT STD_LOGIC;
    uart7_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart7_V_empty_n : IN STD_LOGIC;
    uart7_V_read : OUT STD_LOGIC;
    uart8_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart8_V_empty_n : IN STD_LOGIC;
    uart8_V_read : OUT STD_LOGIC;
    uart9_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart9_V_empty_n : IN STD_LOGIC;
    uart9_V_read : OUT STD_LOGIC;
    uart10_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart10_V_empty_n : IN STD_LOGIC;
    uart10_V_read : OUT STD_LOGIC;
    uart11_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart11_V_empty_n : IN STD_LOGIC;
    uart11_V_read : OUT STD_LOGIC;
    uart12_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart12_V_empty_n : IN STD_LOGIC;
    uart12_V_read : OUT STD_LOGIC;
    uart13_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart13_V_empty_n : IN STD_LOGIC;
    uart13_V_read : OUT STD_LOGIC;
    uart14_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart14_V_empty_n : IN STD_LOGIC;
    uart14_V_read : OUT STD_LOGIC;
    uart15_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart15_V_empty_n : IN STD_LOGIC;
    uart15_V_read : OUT STD_LOGIC;
    uart16_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart16_V_empty_n : IN STD_LOGIC;
    uart16_V_read : OUT STD_LOGIC;
    uart17_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart17_V_empty_n : IN STD_LOGIC;
    uart17_V_read : OUT STD_LOGIC;
    uart18_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart18_V_empty_n : IN STD_LOGIC;
    uart18_V_read : OUT STD_LOGIC;
    busy_V : IN STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of AllDataMover is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AllDataMover,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=305,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1110,HLS_SYN_LUT=1837}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv18_1000 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_const_lv18_2000 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_const_lv18_3000 : STD_LOGIC_VECTOR (17 downto 0) := "000011000000000000";
    constant ap_const_lv18_4000 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_const_lv18_5000 : STD_LOGIC_VECTOR (17 downto 0) := "000101000000000000";
    constant ap_const_lv18_6000 : STD_LOGIC_VECTOR (17 downto 0) := "000110000000000000";
    constant ap_const_lv18_7000 : STD_LOGIC_VECTOR (17 downto 0) := "000111000000000000";
    constant ap_const_lv18_8000 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_const_lv18_9000 : STD_LOGIC_VECTOR (17 downto 0) := "001001000000000000";
    constant ap_const_lv18_A000 : STD_LOGIC_VECTOR (17 downto 0) := "001010000000000000";
    constant ap_const_lv18_B000 : STD_LOGIC_VECTOR (17 downto 0) := "001011000000000000";
    constant ap_const_lv18_C000 : STD_LOGIC_VECTOR (17 downto 0) := "001100000000000000";
    constant ap_const_lv18_D000 : STD_LOGIC_VECTOR (17 downto 0) := "001101000000000000";
    constant ap_const_lv18_E000 : STD_LOGIC_VECTOR (17 downto 0) := "001110000000000000";
    constant ap_const_lv18_F000 : STD_LOGIC_VECTOR (17 downto 0) := "001111000000000000";
    constant ap_const_lv18_10000 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_const_lv18_11000 : STD_LOGIC_VECTOR (17 downto 0) := "010001000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal DRAM_AWVALID : STD_LOGIC;
    signal DRAM_AWREADY : STD_LOGIC;
    signal DRAM_WVALID : STD_LOGIC;
    signal DRAM_WREADY : STD_LOGIC;
    signal DRAM_ARVALID : STD_LOGIC;
    signal DRAM_ARREADY : STD_LOGIC;
    signal DRAM_RVALID : STD_LOGIC;
    signal DRAM_RREADY : STD_LOGIC;
    signal DRAM_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DRAM_RLAST : STD_LOGIC;
    signal DRAM_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DRAM_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DRAM_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DRAM_BVALID : STD_LOGIC;
    signal DRAM_BREADY : STD_LOGIC;
    signal DRAM_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DRAM_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DRAM_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_462_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_603 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_6_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_618 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_668 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_683 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_688 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RecivUART_fu_396_ap_start : STD_LOGIC;
    signal grp_RecivUART_fu_396_ap_done : STD_LOGIC;
    signal grp_RecivUART_fu_396_ap_idle : STD_LOGIC;
    signal grp_RecivUART_fu_396_ap_ready : STD_LOGIC;
    signal grp_RecivUART_fu_396_m_axi_a_AWVALID : STD_LOGIC;
    signal grp_RecivUART_fu_396_m_axi_a_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_WVALID : STD_LOGIC;
    signal grp_RecivUART_fu_396_m_axi_a_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_WLAST : STD_LOGIC;
    signal grp_RecivUART_fu_396_m_axi_a_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARVALID : STD_LOGIC;
    signal grp_RecivUART_fu_396_m_axi_a_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RecivUART_fu_396_m_axi_a_RREADY : STD_LOGIC;
    signal grp_RecivUART_fu_396_m_axi_a_BREADY : STD_LOGIC;
    signal grp_RecivUART_fu_396_uart_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RecivUART_fu_396_uart_V_empty_n : STD_LOGIC;
    signal grp_RecivUART_fu_396_uart_V_read : STD_LOGIC;
    signal grp_RecivUART_fu_396_busy_V : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RecivUART_fu_396_BaseAddress : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_RecivUART_fu_396_index_V : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_grp_RecivUART_fu_396_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component RecivUART IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_a_AWVALID : OUT STD_LOGIC;
        m_axi_a_AWREADY : IN STD_LOGIC;
        m_axi_a_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_a_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_WVALID : OUT STD_LOGIC;
        m_axi_a_WREADY : IN STD_LOGIC;
        m_axi_a_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_a_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_WLAST : OUT STD_LOGIC;
        m_axi_a_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_ARVALID : OUT STD_LOGIC;
        m_axi_a_ARREADY : IN STD_LOGIC;
        m_axi_a_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_a_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_RVALID : IN STD_LOGIC;
        m_axi_a_RREADY : OUT STD_LOGIC;
        m_axi_a_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_a_RLAST : IN STD_LOGIC;
        m_axi_a_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_BVALID : IN STD_LOGIC;
        m_axi_a_BREADY : OUT STD_LOGIC;
        m_axi_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        uart_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        uart_V_empty_n : IN STD_LOGIC;
        uart_V_read : OUT STD_LOGIC;
        busy_V : IN STD_LOGIC_VECTOR (0 downto 0);
        BaseAddress : IN STD_LOGIC_VECTOR (17 downto 0);
        index_V : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component AllDataMover_DRAM_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    AllDataMover_DRAM_m_axi_U : component AllDataMover_DRAM_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DRAM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DRAM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DRAM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DRAM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DRAM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DRAM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DRAM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DRAM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DRAM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DRAM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DRAM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DRAM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DRAM_AWVALID,
        AWREADY => m_axi_DRAM_AWREADY,
        AWADDR => m_axi_DRAM_AWADDR,
        AWID => m_axi_DRAM_AWID,
        AWLEN => m_axi_DRAM_AWLEN,
        AWSIZE => m_axi_DRAM_AWSIZE,
        AWBURST => m_axi_DRAM_AWBURST,
        AWLOCK => m_axi_DRAM_AWLOCK,
        AWCACHE => m_axi_DRAM_AWCACHE,
        AWPROT => m_axi_DRAM_AWPROT,
        AWQOS => m_axi_DRAM_AWQOS,
        AWREGION => m_axi_DRAM_AWREGION,
        AWUSER => m_axi_DRAM_AWUSER,
        WVALID => m_axi_DRAM_WVALID,
        WREADY => m_axi_DRAM_WREADY,
        WDATA => m_axi_DRAM_WDATA,
        WSTRB => m_axi_DRAM_WSTRB,
        WLAST => m_axi_DRAM_WLAST,
        WID => m_axi_DRAM_WID,
        WUSER => m_axi_DRAM_WUSER,
        ARVALID => m_axi_DRAM_ARVALID,
        ARREADY => m_axi_DRAM_ARREADY,
        ARADDR => m_axi_DRAM_ARADDR,
        ARID => m_axi_DRAM_ARID,
        ARLEN => m_axi_DRAM_ARLEN,
        ARSIZE => m_axi_DRAM_ARSIZE,
        ARBURST => m_axi_DRAM_ARBURST,
        ARLOCK => m_axi_DRAM_ARLOCK,
        ARCACHE => m_axi_DRAM_ARCACHE,
        ARPROT => m_axi_DRAM_ARPROT,
        ARQOS => m_axi_DRAM_ARQOS,
        ARREGION => m_axi_DRAM_ARREGION,
        ARUSER => m_axi_DRAM_ARUSER,
        RVALID => m_axi_DRAM_RVALID,
        RREADY => m_axi_DRAM_RREADY,
        RDATA => m_axi_DRAM_RDATA,
        RLAST => m_axi_DRAM_RLAST,
        RID => m_axi_DRAM_RID,
        RUSER => m_axi_DRAM_RUSER,
        RRESP => m_axi_DRAM_RRESP,
        BVALID => m_axi_DRAM_BVALID,
        BREADY => m_axi_DRAM_BREADY,
        BRESP => m_axi_DRAM_BRESP,
        BID => m_axi_DRAM_BID,
        BUSER => m_axi_DRAM_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DRAM_ARVALID,
        I_ARREADY => DRAM_ARREADY,
        I_ARADDR => grp_RecivUART_fu_396_m_axi_a_ARADDR,
        I_ARID => grp_RecivUART_fu_396_m_axi_a_ARID,
        I_ARLEN => grp_RecivUART_fu_396_m_axi_a_ARLEN,
        I_ARSIZE => grp_RecivUART_fu_396_m_axi_a_ARSIZE,
        I_ARLOCK => grp_RecivUART_fu_396_m_axi_a_ARLOCK,
        I_ARCACHE => grp_RecivUART_fu_396_m_axi_a_ARCACHE,
        I_ARQOS => grp_RecivUART_fu_396_m_axi_a_ARQOS,
        I_ARPROT => grp_RecivUART_fu_396_m_axi_a_ARPROT,
        I_ARUSER => grp_RecivUART_fu_396_m_axi_a_ARUSER,
        I_ARBURST => grp_RecivUART_fu_396_m_axi_a_ARBURST,
        I_ARREGION => grp_RecivUART_fu_396_m_axi_a_ARREGION,
        I_RVALID => DRAM_RVALID,
        I_RREADY => DRAM_RREADY,
        I_RDATA => DRAM_RDATA,
        I_RID => DRAM_RID,
        I_RUSER => DRAM_RUSER,
        I_RRESP => DRAM_RRESP,
        I_RLAST => DRAM_RLAST,
        I_AWVALID => DRAM_AWVALID,
        I_AWREADY => DRAM_AWREADY,
        I_AWADDR => grp_RecivUART_fu_396_m_axi_a_AWADDR,
        I_AWID => grp_RecivUART_fu_396_m_axi_a_AWID,
        I_AWLEN => grp_RecivUART_fu_396_m_axi_a_AWLEN,
        I_AWSIZE => grp_RecivUART_fu_396_m_axi_a_AWSIZE,
        I_AWLOCK => grp_RecivUART_fu_396_m_axi_a_AWLOCK,
        I_AWCACHE => grp_RecivUART_fu_396_m_axi_a_AWCACHE,
        I_AWQOS => grp_RecivUART_fu_396_m_axi_a_AWQOS,
        I_AWPROT => grp_RecivUART_fu_396_m_axi_a_AWPROT,
        I_AWUSER => grp_RecivUART_fu_396_m_axi_a_AWUSER,
        I_AWBURST => grp_RecivUART_fu_396_m_axi_a_AWBURST,
        I_AWREGION => grp_RecivUART_fu_396_m_axi_a_AWREGION,
        I_WVALID => DRAM_WVALID,
        I_WREADY => DRAM_WREADY,
        I_WDATA => grp_RecivUART_fu_396_m_axi_a_WDATA,
        I_WID => grp_RecivUART_fu_396_m_axi_a_WID,
        I_WUSER => grp_RecivUART_fu_396_m_axi_a_WUSER,
        I_WLAST => grp_RecivUART_fu_396_m_axi_a_WLAST,
        I_WSTRB => grp_RecivUART_fu_396_m_axi_a_WSTRB,
        I_BVALID => DRAM_BVALID,
        I_BREADY => DRAM_BREADY,
        I_BRESP => DRAM_BRESP,
        I_BID => DRAM_BID,
        I_BUSER => DRAM_BUSER);

    grp_RecivUART_fu_396 : component RecivUART
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_RecivUART_fu_396_ap_start,
        ap_done => grp_RecivUART_fu_396_ap_done,
        ap_idle => grp_RecivUART_fu_396_ap_idle,
        ap_ready => grp_RecivUART_fu_396_ap_ready,
        m_axi_a_AWVALID => grp_RecivUART_fu_396_m_axi_a_AWVALID,
        m_axi_a_AWREADY => DRAM_AWREADY,
        m_axi_a_AWADDR => grp_RecivUART_fu_396_m_axi_a_AWADDR,
        m_axi_a_AWID => grp_RecivUART_fu_396_m_axi_a_AWID,
        m_axi_a_AWLEN => grp_RecivUART_fu_396_m_axi_a_AWLEN,
        m_axi_a_AWSIZE => grp_RecivUART_fu_396_m_axi_a_AWSIZE,
        m_axi_a_AWBURST => grp_RecivUART_fu_396_m_axi_a_AWBURST,
        m_axi_a_AWLOCK => grp_RecivUART_fu_396_m_axi_a_AWLOCK,
        m_axi_a_AWCACHE => grp_RecivUART_fu_396_m_axi_a_AWCACHE,
        m_axi_a_AWPROT => grp_RecivUART_fu_396_m_axi_a_AWPROT,
        m_axi_a_AWQOS => grp_RecivUART_fu_396_m_axi_a_AWQOS,
        m_axi_a_AWREGION => grp_RecivUART_fu_396_m_axi_a_AWREGION,
        m_axi_a_AWUSER => grp_RecivUART_fu_396_m_axi_a_AWUSER,
        m_axi_a_WVALID => grp_RecivUART_fu_396_m_axi_a_WVALID,
        m_axi_a_WREADY => DRAM_WREADY,
        m_axi_a_WDATA => grp_RecivUART_fu_396_m_axi_a_WDATA,
        m_axi_a_WSTRB => grp_RecivUART_fu_396_m_axi_a_WSTRB,
        m_axi_a_WLAST => grp_RecivUART_fu_396_m_axi_a_WLAST,
        m_axi_a_WID => grp_RecivUART_fu_396_m_axi_a_WID,
        m_axi_a_WUSER => grp_RecivUART_fu_396_m_axi_a_WUSER,
        m_axi_a_ARVALID => grp_RecivUART_fu_396_m_axi_a_ARVALID,
        m_axi_a_ARREADY => DRAM_ARREADY,
        m_axi_a_ARADDR => grp_RecivUART_fu_396_m_axi_a_ARADDR,
        m_axi_a_ARID => grp_RecivUART_fu_396_m_axi_a_ARID,
        m_axi_a_ARLEN => grp_RecivUART_fu_396_m_axi_a_ARLEN,
        m_axi_a_ARSIZE => grp_RecivUART_fu_396_m_axi_a_ARSIZE,
        m_axi_a_ARBURST => grp_RecivUART_fu_396_m_axi_a_ARBURST,
        m_axi_a_ARLOCK => grp_RecivUART_fu_396_m_axi_a_ARLOCK,
        m_axi_a_ARCACHE => grp_RecivUART_fu_396_m_axi_a_ARCACHE,
        m_axi_a_ARPROT => grp_RecivUART_fu_396_m_axi_a_ARPROT,
        m_axi_a_ARQOS => grp_RecivUART_fu_396_m_axi_a_ARQOS,
        m_axi_a_ARREGION => grp_RecivUART_fu_396_m_axi_a_ARREGION,
        m_axi_a_ARUSER => grp_RecivUART_fu_396_m_axi_a_ARUSER,
        m_axi_a_RVALID => DRAM_RVALID,
        m_axi_a_RREADY => grp_RecivUART_fu_396_m_axi_a_RREADY,
        m_axi_a_RDATA => DRAM_RDATA,
        m_axi_a_RLAST => DRAM_RLAST,
        m_axi_a_RID => DRAM_RID,
        m_axi_a_RUSER => DRAM_RUSER,
        m_axi_a_RRESP => DRAM_RRESP,
        m_axi_a_BVALID => DRAM_BVALID,
        m_axi_a_BREADY => grp_RecivUART_fu_396_m_axi_a_BREADY,
        m_axi_a_BRESP => DRAM_BRESP,
        m_axi_a_BID => DRAM_BID,
        m_axi_a_BUSER => DRAM_BUSER,
        uart_V_dout => grp_RecivUART_fu_396_uart_V_dout,
        uart_V_empty_n => grp_RecivUART_fu_396_uart_V_empty_n,
        uart_V_read => grp_RecivUART_fu_396_uart_V_read,
        busy_V => grp_RecivUART_fu_396_busy_V,
        BaseAddress => grp_RecivUART_fu_396_BaseAddress,
        index_V => grp_RecivUART_fu_396_index_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_RecivUART_fu_396_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_RecivUART_fu_396_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_reg_grp_RecivUART_fu_396_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_RecivUART_fu_396_ap_ready)) then 
                    ap_reg_grp_RecivUART_fu_396_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_10_reg_628 <= busy_V(5 downto 5);
                tmp_11_reg_633 <= busy_V(6 downto 6);
                tmp_12_reg_638 <= busy_V(7 downto 7);
                tmp_13_reg_643 <= busy_V(8 downto 8);
                tmp_14_reg_648 <= busy_V(9 downto 9);
                tmp_15_reg_653 <= busy_V(10 downto 10);
                tmp_16_reg_658 <= busy_V(11 downto 11);
                tmp_17_reg_663 <= busy_V(12 downto 12);
                tmp_18_reg_668 <= busy_V(13 downto 13);
                tmp_19_reg_673 <= busy_V(14 downto 14);
                tmp_20_reg_678 <= busy_V(15 downto 15);
                tmp_21_reg_683 <= busy_V(16 downto 16);
                tmp_22_reg_688 <= busy_V(17 downto 17);
                tmp_6_reg_608 <= busy_V(1 downto 1);
                tmp_7_reg_613 <= busy_V(2 downto 2);
                tmp_8_reg_618 <= busy_V(3 downto 3);
                tmp_9_reg_623 <= busy_V(4 downto 4);
                tmp_reg_603 <= tmp_fu_462_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, grp_RecivUART_fu_396_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_RecivUART_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    DRAM_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_RecivUART_fu_396_m_axi_a_ARVALID, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            DRAM_ARVALID <= grp_RecivUART_fu_396_m_axi_a_ARVALID;
        else 
            DRAM_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DRAM_AWVALID_assign_proc : process(ap_CS_fsm_state1, grp_RecivUART_fu_396_m_axi_a_AWVALID, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            DRAM_AWVALID <= grp_RecivUART_fu_396_m_axi_a_AWVALID;
        else 
            DRAM_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DRAM_BREADY_assign_proc : process(ap_CS_fsm_state1, grp_RecivUART_fu_396_m_axi_a_BREADY, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            DRAM_BREADY <= grp_RecivUART_fu_396_m_axi_a_BREADY;
        else 
            DRAM_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DRAM_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_RecivUART_fu_396_m_axi_a_RREADY, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            DRAM_RREADY <= grp_RecivUART_fu_396_m_axi_a_RREADY;
        else 
            DRAM_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DRAM_WVALID_assign_proc : process(ap_CS_fsm_state1, grp_RecivUART_fu_396_m_axi_a_WVALID, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            DRAM_WVALID <= grp_RecivUART_fu_396_m_axi_a_WVALID;
        else 
            DRAM_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_RecivUART_fu_396_BaseAddress_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_11000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_10000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_F000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_E000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_D000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_C000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_B000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_A000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_9000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_8000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_7000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_6000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_5000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_4000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_3000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_2000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_1000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_RecivUART_fu_396_BaseAddress <= ap_const_lv18_0;
        else 
            grp_RecivUART_fu_396_BaseAddress <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_RecivUART_fu_396_ap_start <= ap_reg_grp_RecivUART_fu_396_ap_start;

    grp_RecivUART_fu_396_busy_V_assign_proc : process(tmp_reg_603, tmp_6_reg_608, tmp_7_reg_613, tmp_8_reg_618, tmp_9_reg_623, tmp_10_reg_628, tmp_11_reg_633, tmp_12_reg_638, tmp_13_reg_643, tmp_14_reg_648, tmp_15_reg_653, tmp_16_reg_658, tmp_17_reg_663, tmp_18_reg_668, tmp_19_reg_673, tmp_20_reg_678, tmp_21_reg_683, tmp_22_reg_688, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_22_reg_688;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_21_reg_683;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_20_reg_678;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_19_reg_673;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_18_reg_668;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_17_reg_663;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_16_reg_658;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_15_reg_653;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_14_reg_648;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_13_reg_643;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_12_reg_638;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_11_reg_633;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_10_reg_628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_9_reg_623;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_8_reg_618;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_7_reg_613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_6_reg_608;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_RecivUART_fu_396_busy_V <= tmp_reg_603;
        else 
            grp_RecivUART_fu_396_busy_V <= "X";
        end if; 
    end process;


    grp_RecivUART_fu_396_index_V_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_RecivUART_fu_396_index_V <= ap_const_lv5_0;
        else 
            grp_RecivUART_fu_396_index_V <= "XXXXX";
        end if; 
    end process;


    grp_RecivUART_fu_396_uart_V_dout_assign_proc : process(uart1_V_dout, uart2_V_dout, uart3_V_dout, uart4_V_dout, uart5_V_dout, uart6_V_dout, uart7_V_dout, uart8_V_dout, uart9_V_dout, uart10_V_dout, uart11_V_dout, uart12_V_dout, uart13_V_dout, uart14_V_dout, uart15_V_dout, uart16_V_dout, uart17_V_dout, uart18_V_dout, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart18_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart17_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart16_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart15_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart14_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart13_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart12_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart11_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart10_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart9_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart8_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart7_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart6_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart5_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart4_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart3_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart2_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_RecivUART_fu_396_uart_V_dout <= uart1_V_dout;
        else 
            grp_RecivUART_fu_396_uart_V_dout <= uart18_V_dout;
        end if; 
    end process;


    grp_RecivUART_fu_396_uart_V_empty_n_assign_proc : process(uart1_V_empty_n, uart2_V_empty_n, uart3_V_empty_n, uart4_V_empty_n, uart5_V_empty_n, uart6_V_empty_n, uart7_V_empty_n, uart8_V_empty_n, uart9_V_empty_n, uart10_V_empty_n, uart11_V_empty_n, uart12_V_empty_n, uart13_V_empty_n, uart14_V_empty_n, uart15_V_empty_n, uart16_V_empty_n, uart17_V_empty_n, uart18_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart18_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart17_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart16_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart15_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart14_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart13_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart12_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart11_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart10_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart9_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart8_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart7_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart6_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart5_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart4_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart3_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart2_V_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart1_V_empty_n;
        else 
            grp_RecivUART_fu_396_uart_V_empty_n <= uart18_V_empty_n;
        end if; 
    end process;

    tmp_fu_462_p1 <= busy_V(1 - 1 downto 0);

    uart10_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            uart10_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart10_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart11_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            uart11_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart11_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart12_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            uart12_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart12_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart13_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            uart13_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart13_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart14_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            uart14_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart14_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart15_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            uart15_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart15_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart16_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            uart16_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart16_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart17_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            uart17_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart17_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart18_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            uart18_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart18_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart1_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            uart1_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart2_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            uart2_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart3_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            uart3_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart4_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            uart4_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart5_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            uart5_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart6_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            uart6_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart7_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            uart7_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart7_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart8_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            uart8_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart8_V_read <= ap_const_logic_0;
        end if; 
    end process;


    uart9_V_read_assign_proc : process(grp_RecivUART_fu_396_uart_V_read, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            uart9_V_read <= grp_RecivUART_fu_396_uart_V_read;
        else 
            uart9_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
