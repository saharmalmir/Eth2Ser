-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RecivUART is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_a_AWVALID : OUT STD_LOGIC;
    m_axi_a_AWREADY : IN STD_LOGIC;
    m_axi_a_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_a_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_a_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_a_WVALID : OUT STD_LOGIC;
    m_axi_a_WREADY : IN STD_LOGIC;
    m_axi_a_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_a_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_WLAST : OUT STD_LOGIC;
    m_axi_a_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_a_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_a_ARVALID : OUT STD_LOGIC;
    m_axi_a_ARREADY : IN STD_LOGIC;
    m_axi_a_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_a_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_a_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_a_RVALID : IN STD_LOGIC;
    m_axi_a_RREADY : OUT STD_LOGIC;
    m_axi_a_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_a_RLAST : IN STD_LOGIC;
    m_axi_a_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_a_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_BVALID : IN STD_LOGIC;
    m_axi_a_BREADY : OUT STD_LOGIC;
    m_axi_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_a_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    uart_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    uart_V_empty_n : IN STD_LOGIC;
    uart_V_read : OUT STD_LOGIC;
    busy_V : IN STD_LOGIC_VECTOR (0 downto 0);
    BaseAddress : IN STD_LOGIC_VECTOR (17 downto 0);
    index_V : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of RecivUART is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_FFA : STD_LOGIC_VECTOR (11 downto 0) := "111111111010";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal write_index_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal write_index_V_ce0 : STD_LOGIC;
    signal write_index_V_we0 : STD_LOGIC;
    signal write_index_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal write_index_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal a_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal a_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal a_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal a_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal brmerge_reg_241 : STD_LOGIC_VECTOR (0 downto 0);
    signal uart_V_blk_n : STD_LOGIC;
    signal BaseAddress_cast1_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal BaseAddress_cast1_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal brmerge_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_index_V_addr_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_159_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_reg_250 : STD_LOGIC_VECTOR (16 downto 0);
    signal write_index_V_load_reg_256 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_6_fu_177_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_reg_261 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_m_axi_a_AWREADY : STD_LOGIC;
    signal tmp_7_fu_196_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_reg_276 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_m_axi_a_WREADY : STD_LOGIC;
    signal tmp_9_fu_216_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_reg_292 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_addr_2_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_a_ARREADY : STD_LOGIC;
    signal count_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_cast_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_a_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_a_WREADY : STD_LOGIC := '0';
    signal tmp_2_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_a_ARREADY : STD_LOGIC := '0';
    signal ap_block_state29 : BOOLEAN;
    signal tmp_not_fu_142_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_not_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_cast_fu_163_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_fu_167_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_cast_fu_173_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component RecivUART_write_ibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    write_index_V_U : component RecivUART_write_ibkb
    generic map (
        DataWidth => 12,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => write_index_V_address0,
        ce0 => write_index_V_ce0,
        we0 => write_index_V_we0,
        d0 => write_index_V_d0,
        q0 => write_index_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_a_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_a_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    if ((ap_sig_ioackin_m_axi_a_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_a_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_a_ARREADY)) then 
                        ap_reg_ioackin_m_axi_a_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_a_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_a_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = uart_V_empty_n) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_a_AWREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_sig_ioackin_m_axi_a_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_sig_ioackin_m_axi_a_AWREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_a_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = m_axi_a_AWREADY) and (uart_V_empty_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = m_axi_a_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_logic_1 = m_axi_a_AWREADY)))) then 
                    ap_reg_ioackin_m_axi_a_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_a_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_a_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_logic_0 = m_axi_a_BVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_a_WREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_m_axi_a_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_sig_ioackin_m_axi_a_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_a_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = m_axi_a_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_a_BVALID = ap_const_logic_1) and (ap_const_logic_1 = m_axi_a_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_logic_1 = m_axi_a_WREADY)))) then 
                    ap_reg_ioackin_m_axi_a_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    BaseAddress_cast1_reg_236(17 downto 0) <= BaseAddress_cast1_fu_138_p1(17 downto 0);
                brmerge_reg_241 <= brmerge_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_sig_ioackin_m_axi_a_ARREADY = ap_const_logic_1))) then
                    a_addr_2_reg_297(16 downto 0) <= tmp_9_cast_fu_221_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_sig_ioackin_m_axi_a_AWREADY = ap_const_logic_1))) then
                count_1_reg_308 <= count_1_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_a_RVALID = ap_const_logic_1))) then
                count_reg_303 <= m_axi_a_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_0 = brmerge_fu_148_p2))) then
                tmp_4_reg_250 <= tmp_4_fu_159_p1;
                write_index_V_addr_reg_245 <= tmp_3_fu_154_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = uart_V_empty_n) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_a_AWREADY))))) then
                tmp_5_reg_266 <= uart_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_6_reg_261 <= tmp_6_fu_177_p2;
                write_index_V_load_reg_256 <= write_index_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_sig_ioackin_m_axi_a_AWREADY = ap_const_logic_1))) then
                tmp_7_reg_276 <= tmp_7_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_a_BVALID = ap_const_logic_1))) then
                tmp_9_reg_292 <= tmp_9_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_logic_0 = m_axi_a_BVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_a_WREADY))))) then
                tmp_s_reg_288 <= tmp_s_fu_211_p2;
            end if;
        end if;
    end process;
    BaseAddress_cast1_reg_236(31 downto 18) <= "00000000000000";
    a_addr_2_reg_297(31 downto 17) <= "000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_a_RVALID, m_axi_a_BVALID, uart_V_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state29, brmerge_reg_241, brmerge_fu_148_p2, ap_sig_ioackin_m_axi_a_AWREADY, ap_sig_ioackin_m_axi_a_WREADY, ap_sig_ioackin_m_axi_a_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (brmerge_fu_148_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_0 = brmerge_fu_148_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = uart_V_empty_n) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_a_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_m_axi_a_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_sig_ioackin_m_axi_a_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_logic_0 = m_axi_a_BVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_a_WREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_a_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_sig_ioackin_m_axi_a_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_a_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_sig_ioackin_m_axi_a_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_sig_ioackin_m_axi_a_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and not(((brmerge_reg_241 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_a_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    BaseAddress_cast1_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(BaseAddress),32));

    a_blk_n_AR_assign_proc : process(m_axi_a_ARREADY, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            a_blk_n_AR <= m_axi_a_ARREADY;
        else 
            a_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    a_blk_n_AW_assign_proc : process(m_axi_a_AWREADY, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            a_blk_n_AW <= m_axi_a_AWREADY;
        else 
            a_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    a_blk_n_B_assign_proc : process(m_axi_a_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state29, brmerge_reg_241)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (brmerge_reg_241 = ap_const_lv1_0)))) then 
            a_blk_n_B <= m_axi_a_BVALID;
        else 
            a_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    a_blk_n_R_assign_proc : process(m_axi_a_RVALID, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            a_blk_n_R <= m_axi_a_RVALID;
        else 
            a_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    a_blk_n_W_assign_proc : process(m_axi_a_WREADY, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            a_blk_n_W <= m_axi_a_WREADY;
        else 
            a_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state29_assign_proc : process(m_axi_a_BVALID, brmerge_reg_241)
    begin
                ap_block_state29 <= ((brmerge_reg_241 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_a_BVALID));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_a_BVALID, ap_CS_fsm_state29, brmerge_reg_241)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and not(((brmerge_reg_241 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_a_BVALID)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_a_BVALID, ap_CS_fsm_state29, brmerge_reg_241)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and not(((brmerge_reg_241 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_a_BVALID))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_a_ARREADY_assign_proc : process(m_axi_a_ARREADY, ap_reg_ioackin_m_axi_a_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_a_ARREADY)) then 
            ap_sig_ioackin_m_axi_a_ARREADY <= m_axi_a_ARREADY;
        else 
            ap_sig_ioackin_m_axi_a_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_a_AWREADY_assign_proc : process(m_axi_a_AWREADY, ap_reg_ioackin_m_axi_a_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_a_AWREADY)) then 
            ap_sig_ioackin_m_axi_a_AWREADY <= m_axi_a_AWREADY;
        else 
            ap_sig_ioackin_m_axi_a_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_a_WREADY_assign_proc : process(m_axi_a_WREADY, ap_reg_ioackin_m_axi_a_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_a_WREADY)) then 
            ap_sig_ioackin_m_axi_a_WREADY <= m_axi_a_WREADY;
        else 
            ap_sig_ioackin_m_axi_a_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    brmerge_fu_148_p2 <= (busy_V or tmp_not_fu_142_p2);
    count_1_fu_231_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(count_reg_303));
    m_axi_a_ARADDR <= tmp_9_cast_fu_221_p1;
    m_axi_a_ARBURST <= ap_const_lv2_0;
    m_axi_a_ARCACHE <= ap_const_lv4_0;
    m_axi_a_ARID <= ap_const_lv1_0;
    m_axi_a_ARLEN <= ap_const_lv32_1;
    m_axi_a_ARLOCK <= ap_const_lv2_0;
    m_axi_a_ARPROT <= ap_const_lv3_0;
    m_axi_a_ARQOS <= ap_const_lv4_0;
    m_axi_a_ARREGION <= ap_const_lv4_0;
    m_axi_a_ARSIZE <= ap_const_lv3_0;
    m_axi_a_ARUSER <= ap_const_lv1_0;

    m_axi_a_ARVALID_assign_proc : process(ap_CS_fsm_state15, ap_reg_ioackin_m_axi_a_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_a_ARREADY))) then 
            m_axi_a_ARVALID <= ap_const_logic_1;
        else 
            m_axi_a_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_a_AWADDR_assign_proc : process(uart_V_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state23, BaseAddress_cast1_reg_236, a_addr_2_reg_297, tmp_6_cast_fu_182_p1, ap_reg_ioackin_m_axi_a_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_a_AWREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                m_axi_a_AWADDR <= a_addr_2_reg_297;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                m_axi_a_AWADDR <= BaseAddress_cast1_reg_236;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (uart_V_empty_n = ap_const_logic_1))) then 
                m_axi_a_AWADDR <= tmp_6_cast_fu_182_p1;
            else 
                m_axi_a_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_a_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_a_AWBURST <= ap_const_lv2_0;
    m_axi_a_AWCACHE <= ap_const_lv4_0;
    m_axi_a_AWID <= ap_const_lv1_0;
    m_axi_a_AWLEN <= ap_const_lv32_1;
    m_axi_a_AWLOCK <= ap_const_lv2_0;
    m_axi_a_AWPROT <= ap_const_lv3_0;
    m_axi_a_AWQOS <= ap_const_lv4_0;
    m_axi_a_AWREGION <= ap_const_lv4_0;
    m_axi_a_AWSIZE <= ap_const_lv3_0;
    m_axi_a_AWUSER <= ap_const_lv1_0;

    m_axi_a_AWVALID_assign_proc : process(uart_V_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state23, ap_reg_ioackin_m_axi_a_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (uart_V_empty_n = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_a_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_a_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_a_AWREADY)))) then 
            m_axi_a_AWVALID <= ap_const_logic_1;
        else 
            m_axi_a_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_a_BREADY_assign_proc : process(m_axi_a_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state29, brmerge_reg_241, ap_sig_ioackin_m_axi_a_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_logic_0 = m_axi_a_BVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_a_WREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_a_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (brmerge_reg_241 = ap_const_lv1_0) and not(((brmerge_reg_241 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_a_BVALID)))))) then 
            m_axi_a_BREADY <= ap_const_logic_1;
        else 
            m_axi_a_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_a_RREADY_assign_proc : process(m_axi_a_RVALID, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_a_RVALID = ap_const_logic_1))) then 
            m_axi_a_RREADY <= ap_const_logic_1;
        else 
            m_axi_a_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_a_WDATA_assign_proc : process(m_axi_a_BVALID, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state24, count_1_reg_308, ap_reg_ioackin_m_axi_a_WREADY, tmp_2_fu_192_p1, tmp_8_fu_207_p1)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_a_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                m_axi_a_WDATA <= count_1_reg_308;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_a_BVALID = ap_const_logic_1))) then 
                m_axi_a_WDATA <= tmp_8_fu_207_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                m_axi_a_WDATA <= tmp_2_fu_192_p1;
            else 
                m_axi_a_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_a_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_a_WID <= ap_const_lv1_0;
    m_axi_a_WLAST <= ap_const_logic_0;
    m_axi_a_WSTRB <= ap_const_lv4_F;
    m_axi_a_WUSER <= ap_const_lv1_0;

    m_axi_a_WVALID_assign_proc : process(m_axi_a_BVALID, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state24, ap_reg_ioackin_m_axi_a_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_a_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_a_BVALID = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_a_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_a_WREADY)))) then 
            m_axi_a_WVALID <= ap_const_logic_1;
        else 
            m_axi_a_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_167_p2),17));
    tmp1_fu_167_p2 <= std_logic_vector(unsigned(ap_const_lv13_2) + unsigned(tmp_4_cast_fu_163_p1));
        tmp_2_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_266),32));

    tmp_3_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V),32));
    tmp_4_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_index_V_q0),13));
    tmp_4_fu_159_p1 <= BaseAddress(17 - 1 downto 0);
    tmp_6_cast_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_261),32));
    tmp_6_fu_177_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_173_p1) + unsigned(tmp_4_reg_250));
    tmp_7_fu_196_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(write_index_V_load_reg_256));
    tmp_8_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_276),32));
    tmp_9_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_292),32));
    tmp_9_fu_216_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(tmp_4_reg_250));
    tmp_not_fu_142_p0 <= (0=>uart_V_empty_n, others=>'-');
    tmp_not_fu_142_p2 <= (tmp_not_fu_142_p0 xor ap_const_lv1_1);
    tmp_s_fu_211_p2 <= "1" when (tmp_7_reg_276 = ap_const_lv12_FFA) else "0";

    uart_V_blk_n_assign_proc : process(uart_V_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            uart_V_blk_n <= uart_V_empty_n;
        else 
            uart_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    uart_V_read_assign_proc : process(uart_V_empty_n, ap_CS_fsm_state3, ap_sig_ioackin_m_axi_a_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = uart_V_empty_n) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_a_AWREADY))))) then 
            uart_V_read <= ap_const_logic_1;
        else 
            uart_V_read <= ap_const_logic_0;
        end if; 
    end process;


    write_index_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state9, ap_CS_fsm_state29, write_index_V_addr_reg_245, tmp_3_fu_154_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            write_index_V_address0 <= write_index_V_addr_reg_245;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            write_index_V_address0 <= tmp_3_fu_154_p1(5 - 1 downto 0);
        else 
            write_index_V_address0 <= "XXXXX";
        end if; 
    end process;


    write_index_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_a_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state29, brmerge_reg_241, ap_sig_ioackin_m_axi_a_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_logic_0 = m_axi_a_BVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_a_WREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state29) and not(((brmerge_reg_241 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_a_BVALID)))))) then 
            write_index_V_ce0 <= ap_const_logic_1;
        else 
            write_index_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    write_index_V_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state29, tmp_7_reg_276)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            write_index_V_d0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            write_index_V_d0 <= tmp_7_reg_276;
        else 
            write_index_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    write_index_V_we0_assign_proc : process(m_axi_a_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state29, brmerge_reg_241, tmp_s_reg_288, ap_sig_ioackin_m_axi_a_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_logic_0 = m_axi_a_BVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_a_WREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (brmerge_reg_241 = ap_const_lv1_0) and not(((brmerge_reg_241 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_a_BVALID))) and (tmp_s_reg_288 = ap_const_lv1_1)))) then 
            write_index_V_we0 <= ap_const_logic_1;
        else 
            write_index_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
