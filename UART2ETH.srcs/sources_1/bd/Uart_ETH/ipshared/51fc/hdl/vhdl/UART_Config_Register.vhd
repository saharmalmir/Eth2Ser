-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity UART_Config_Register is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of UART_Config_Register is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "UART_Config_Register,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.132600,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1148,HLS_SYN_LUT=2241}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal a_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_97_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_270 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_103_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_91_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_261_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_s_reg_68 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_reg_80 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_cast_fu_113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_107_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal Lo_assign_fu_122_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_fu_118_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Hi_assign_fu_129_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_145_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_149_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_153_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_159_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_175_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_167_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_183_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_fu_135_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_11_fu_189_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_14_fu_201_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_15_fu_207_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_12_fu_193_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_13_fu_197_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_17_fu_225_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_18_fu_231_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan_fu_237_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_19_fu_243_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_16_fu_217_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_20_fu_249_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_21_fu_255_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component UART_Config_Register_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        a_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        a_ce0 : IN STD_LOGIC;
        a_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    UART_Config_Register_AXILiteS_s_axi_U : component UART_Config_Register_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        a_address0 => a_address0,
        a_ce0 => a_ce0,
        a_q0 => a_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_80 <= i_1_reg_270;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_80 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_270 <= i_1_fu_97_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Val2_s_reg_68 <= p_Result_1_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_91_p2 = ap_const_lv1_0))) then
                tmp_reg_275 <= tmp_fu_103_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, exitcond_fu_91_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_91_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Hi_assign_fu_129_p2 <= (Lo_assign_fu_122_p3 or ap_const_lv7_7);
    Lo_assign_fu_122_p3 <= (tmp_reg_275 & ap_const_lv3_0);
    a_address0 <= tmp_cast_fu_113_p1(5 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_return <= p_Val2_s_reg_68;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond_fu_91_p2 <= "1" when (i_reg_80 = ap_const_lv5_10) else "0";
    i_1_fu_97_p2 <= std_logic_vector(unsigned(i_reg_80) + unsigned(ap_const_lv5_1));
    loc_V_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_118_p1),128));
    p_Result_1_fu_261_p2 <= (tmp_20_fu_249_p2 or tmp_21_fu_255_p2);
    p_Result_s_fu_118_p1 <= a_q0(8 - 1 downto 0);
    p_demorgan_fu_237_p2 <= (tmp_17_fu_225_p2 and tmp_18_fu_231_p2);
    tmp_10_fu_183_p2 <= (tmp_7_fu_159_p3 xor ap_const_lv8_7F);
    tmp_11_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_175_p3),128));
    tmp_12_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_167_p3),128));
    tmp_13_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_183_p2),128));
    tmp_14_fu_201_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_135_p1),to_integer(unsigned('0' & tmp_11_fu_189_p1(31-1 downto 0)))));
    
    tmp_15_fu_207_p4_proc : process(tmp_14_fu_201_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_15_fu_207_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_14_fu_201_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_15_fu_207_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_15_fu_207_p4_i) := tmp_14_fu_201_p2(128-1-tmp_15_fu_207_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_15_fu_207_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_16_fu_217_p3 <= 
        tmp_15_fu_207_p4 when (tmp_3_fu_139_p2(0) = '1') else 
        tmp_14_fu_201_p2;
    tmp_17_fu_225_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & tmp_12_fu_193_p1(31-1 downto 0)))));
    tmp_18_fu_231_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & tmp_13_fu_197_p1(31-1 downto 0)))));
    tmp_19_fu_243_p2 <= (p_demorgan_fu_237_p2 xor ap_const_lv128_lc_1);
    tmp_1_fu_107_p2 <= std_logic_vector(shift_left(unsigned(i_reg_80),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_20_fu_249_p2 <= (p_Val2_s_reg_68 and tmp_19_fu_243_p2);
    tmp_21_fu_255_p2 <= (tmp_16_fu_217_p3 and p_demorgan_fu_237_p2);
    tmp_3_fu_139_p2 <= "1" when (unsigned(Lo_assign_fu_122_p3) > unsigned(Hi_assign_fu_129_p2)) else "0";
    tmp_4_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_fu_122_p3),8));
    tmp_5_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_assign_fu_129_p2),8));
    tmp_6_fu_153_p2 <= (tmp_4_fu_145_p1 xor ap_const_lv8_7F);
    tmp_7_fu_159_p3 <= 
        tmp_4_fu_145_p1 when (tmp_3_fu_139_p2(0) = '1') else 
        tmp_5_fu_149_p1;
    tmp_8_fu_167_p3 <= 
        tmp_5_fu_149_p1 when (tmp_3_fu_139_p2(0) = '1') else 
        tmp_4_fu_145_p1;
    tmp_9_fu_175_p3 <= 
        tmp_6_fu_153_p2 when (tmp_3_fu_139_p2(0) = '1') else 
        tmp_4_fu_145_p1;
    tmp_cast_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_107_p2),32));
    tmp_fu_103_p1 <= i_reg_80(4 - 1 downto 0);
end behav;
